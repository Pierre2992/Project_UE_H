df_final <- bind_rows(liste_donnees)
# Sauvegarder en CSV
write.csv(df_final, "precipitations_completes.csv", row.names = FALSE)
print("Le fichier CSV a été généré avec succès !")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("sf")
library(dplyr)
library(geosphere)  # Pour la distance entre points
install.packages("geosphere")
library(dplyr)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
# Fusionner précipitations avec le dataset des régions sur lat/lon
df_precip_regions <- df_precip %>%
left_join(df_regions, by = c("lat" = "latitude", "lon" = "longitude"))
# Vérifier le résultat
head(df_precip_regions)
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
df_regions <- df_regions %>% drop_na(latitude, longitude)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Calcul de la distance et association à la région la plus proche
df_precip$nearest_region <- apply(st_distance(df_precip_sf, df_regions_sf), 1, function(x) {
df_regions$name[which.min(x)]  # Associe à la région avec la distance minimale
})
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Calcul de la distance et association à la région la plus proche
df_precip$nearest_region <- apply(st_distance(df_precip_sf, df_regions_sf), 1, function(x) {
df_regions$name[which.min(x)]  # Associe à la région avec la distance minimale
})
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("states.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Trouver la région la plus proche pour chaque point de précipitation
df_precip$nearest_region <- st_nearest_feature(df_precip_sf, df_regions_sf)
# Associer le nom de la région la plus proche
df_precip$nearest_region_name <- df_regions$name[df_precip$nearest_region]
# Sauvegarder le fichier mis à jour
write.csv(df_precip, "precipitations_avec_regions.csv", row.names = FALSE)
# Afficher les 10 premières lignes pour vérification
head(df_precip, 10)
head(df_precip)
dengue_df <- read.csv("dengue_data.csv")
print(colnames(df_precip))
print(colnames(dengue_df))
# Calculer le nombre de valeurs uniques
nombre_valeurs_uniques <- length(unique(df_precip$nearest_region_name))
# Afficher le résultat
print(nombre_valeurs_uniques)
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("Countries Longitude and Latitude.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Trouver la région la plus proche pour chaque point de précipitation
df_precip$nearest_region <- st_nearest_feature(df_precip_sf, df_regions_sf)
# Associer le nom de la région la plus proche
df_precip$nearest_region_name <- df_regions$name[df_precip$nearest_region]
# Sauvegarder le fichier mis à jour
write.csv(df_precip, "precipitations_avec_pays.csv", row.names = FALSE)
# Afficher les 10 premières lignes pour vérification
head(df_precip, 10)
dengue_df <- read.csv("dengue_data.csv")
print(colnames(df_precip))
print(colnames(dengue_df))
# Calculer le nombre de valeurs uniques
nombre_valeurs_uniques <- length(unique(df_precip$nearest_region_name))
# Afficher le résultat
print(nombre_valeurs_uniques)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_df, precip_by_country, by = c("adm_0_name", "Year"))
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_df, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "calendar_start_date" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
# Chargement des packages nécessaires
library(ggplot2)
# Supprimer les lignes avec NA dans total_precipitation
cleaned_df <- na.omit(merged_df)
# Calcul de la corrélation entre précipitations et nombre total de cas de dengue
correlation <- cor(merged_df$total_precipitation, merged_df$dengue_total, use = "complete.obs")
# Chargement des packages nécessaires
library(ggplot2)
# Filtrer les lignes où les deux colonnes ne sont pas NA
filtered_data <- merged_df %>%
filter(!is.na(total_precipitation) & !is.na(dengue_total))
# Vérifier de nouveau le nombre de NA
sum(is.na(filtered_data$total_precipitation))
sum(is.na(filtered_data$dengue_total))
# Calcul de la corrélation entre précipitations et nombre total de cas de dengue
correlation <- cor(filtered_data$total_precipitation, filtered_data$dengue_total, use = "complete.obs")
# Vérifier les types des colonnes
str(filtered_data$total_precipitation)
str(filtered_data$dengue_total)
# Voir un extrait des colonnes pour vérifier les valeurs
head(filtered_data$total_precipitation)
head(filtered_data$dengue_total)
# Voir un extrait des colonnes pour vérifier les valeurs
head(filtered_data$total_precipitation)
head(filtered_data$dengue_total)
# Vérifier les valeurs non numériques dans les colonnes
unique(filtered_data$total_precipitation)
unique(filtered_data$dengue_total)
# Remplacer les valeurs non numériques par NA
filtered_data$total_precipitation <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$total_precipitation))
filtered_data$dengue_total <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$dengue_total))
# Vérifier si la conversion a fonctionné
summary(filtered_data$total_precipitation)
summary(filtered_data$dengue_total)
# Remplacer les valeurs non numériques par NA
filtered_data$total_precipitation <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$total_precipitation))
filtered_data$dengue_total <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$dengue_total))
# Vérifier si la conversion a fonctionné
summary(filtered_data$total_precipitation)
summary(filtered_data$dengue_total)
# Filtrer les lignes où les deux colonnes ne sont pas NA
filtered_data <- filtered_data %>%
filter(!is.na(total_precipitation) & !is.na(dengue_total))
# Vérifier les NA restants
sum(is.na(filtered_data$total_precipitation))
sum(is.na(filtered_data$dengue_total))
# Remplacer les valeurs non numériques par NA
filtered_data$total_precipitation <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$total_precipitation))
filtered_data$dengue_total <- as.numeric(gsub("[^0-9.-]", NA, filtered_data$dengue_total))
# Vérifier si la conversion a fonctionné
summary(filtered_data$total_precipitation)
summary(filtered_data$dengue_total)
# Filtrer les lignes où les deux colonnes ne sont pas NA
filtered_data <- filtered_data %>%
filter(!is.na(total_precipitation) & !is.na(dengue_total))
# Vérifier les NA restants
sum(is.na(filtered_data$total_precipitation))
sum(is.na(filtered_data$dengue_total))
# Calculer la corrélation
correlation <- cor(filtered_data$total_precipitation, filtered_data$dengue_total)
print(correlation)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
write.csv(precip_by_country, "precip_by_country.csv")
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_df, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "calendar_start_date" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
# Ouvrir le fichier NetCDF
nc_file <- "precip2nc/GPCC_total_precipitation_mon_1x1_global_2017_v2020.0.nc"
nc_data <- nc_open(nc_file)
library(ncdf4)
library(dplyr)
library(tidyr)
# Définir le dossier contenant les fichiers .nc
dossier_nc <- "precip2nc/"
fichiers_nc <- list.files(dossier_nc, pattern = "\\.nc$", full.names = TRUE)
# Initialiser une liste pour stocker les données de chaque fichier
liste_donnees <- list()
# Boucle sur tous les fichiers .nc du dossier
for (fichier in fichiers_nc) {
print(paste("Lecture du fichier:", fichier))
# Ouvrir le fichier NetCDF
nc_data <- nc_open(fichier)
# Extraction des variables
lon <- ncvar_get(nc_data, "lon")  # Longitude
lat <- ncvar_get(nc_data, "lat")  # Latitude
time <- ncvar_get(nc_data, "time")  # Temps
pr <- ncvar_get(nc_data, "pr")  # Précipitations
# Convertir le temps en date (cf. unité "days since 1891-01-01")
time_units <- ncatt_get(nc_data, "time", "units")$value
ref_date <- as.Date(substr(time_units, 12, 21))
time_dates <- ref_date + time  # Convertir les jours en dates
# Transformer les données en format tabulaire
df <- expand.grid(lon = lon, lat = lat, time = time_dates)
df$precipitation <- as.vector(pr)
# Nettoyer les valeurs manquantes
df <- df %>% filter(!is.na(precipitation))
# Ajouter à la liste
liste_donnees[[fichier]] <- df
# Fermer le fichier NetCDF
nc_close(nc_data)
}
# Fusionner toutes les données des fichiers en un seul dataframe
df_final <- bind_rows(liste_donnees)
# Sauvegarder en CSV
write.csv(df_final, "precipitations_completes.csv", row.names = FALSE)
print("Le fichier CSV a été généré avec succès !")
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("Countries Longitude and Latitude.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Trouver la région la plus proche pour chaque point de précipitation
df_precip$nearest_region <- st_nearest_feature(df_precip_sf, df_regions_sf)
# Associer le nom de la région la plus proche
df_precip$nearest_region_name <- df_regions$name[df_precip$nearest_region]
# Sauvegarder le fichier mis à jour
write.csv(df_precip, "precipitations_avec_pays.csv", row.names = FALSE)
# Afficher les 10 premières lignes pour vérification
head(df_precip, 10)
dengue_df <- read.csv("dengue_data.csv")
print(colnames(df_precip))
print(colnames(dengue_df))
# Calculer le nombre de valeurs uniques
nombre_valeurs_uniques <- length(unique(df_precip$nearest_region_name))
# Afficher le résultat
print(nombre_valeurs_uniques)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
write.csv(precip_by_country, "precip_by_country.csv")
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_df, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "calendar_start_date" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
# Vérifier les premières lignes des colonnes de date
head(dengue_df$calendar_start_date)
head(precip_by_country$time)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
write.csv(precip_by_country, "precip_by_country.csv")
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# S'assurer que la colonne calendar_start_date est au format Date
dengue_df$calendar_start_date <- as.Date(dengue_df$calendar_start_date)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
# Regrouper les données de dengue par pays et par mois
dengue_monthly <- dengue_df %>%
group_by(adm_0_name, year_month) %>%
summarise(dengue_total_monthly = sum(dengue_total, na.rm = TRUE))
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_df, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "year_month" = "time"))
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# S'assurer que la colonne calendar_start_date est au format Date
dengue_df$calendar_start_date <- as.Date(dengue_df$calendar_start_date)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
# Regrouper les données de dengue par pays et par mois
dengue_monthly <- dengue_df %>%
group_by(adm_0_name, year_month) %>%
summarise(dengue_total_monthly = sum(dengue_total, na.rm = TRUE))
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_monthly, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "year_month" = "time"))
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# S'assurer que la colonne calendar_start_date est au format Date
precip_by_country$time <- as.Date(precip_by_country$time)
# S'assurer que la colonne calendar_start_date est au format Date
dengue_df$calendar_start_date <- as.Date(dengue_df$calendar_start_date)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
# Regrouper les données de dengue par pays et par mois
dengue_monthly <- dengue_df %>%
group_by(adm_0_name, year_month) %>%
summarise(dengue_total_monthly = sum(dengue_total, na.rm = TRUE))
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_monthly, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "year_month" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
# Vérifier les noms de pays (adm_0_name dans dengue_df et nearest_region_name dans df_precip)
unique(dengue_df$adm_0_name)
unique(df_precip$nearest_region_name)
# Vérifier les dates (calendar_start_date dans dengue_df et time dans df_precip)
unique(dengue_df$year_month)
unique(df_precip$time)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# S'assurer que la colonne calendar_start_date est au format Date
precip_by_country$time <- as.Date(precip_by_country$time)
# S'assurer que la colonne calendar_start_date est au format Date
dengue_df$calendar_start_date <- as.Date(dengue_df$calendar_start_date)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
# Regrouper les données de dengue par pays et par mois
dengue_monthly <- dengue_df %>%
group_by(adm_0_name, year_month) %>%
summarise(dengue_total_monthly = sum(dengue_total, na.rm = TRUE))
# Nettoyer les noms de pays en convertissant en majuscules
dengue_monthly$adm_0_name <- toupper(trimws(dengue_monthly$adm_0_name))
precip_by_country$nearest_region_name <- toupper(trimws(precip_by_country$nearest_region_name))
# Nettoyer les dates pour qu'elles soient au même format (si nécessaire)
dengue_monthly$year_month <- as.Date(dengue_monthly$year_month)
precip_by_country$time <- as.Date(precip_by_country$time)
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_monthly, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "year_month" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
library(ncdf4)
library(dplyr)
library(tidyr)
# Définir le dossier contenant les fichiers .nc
dossier_nc <- "precip2nc/"
fichiers_nc <- list.files(dossier_nc, pattern = "\\.nc$", full.names = TRUE)
# Initialiser une liste pour stocker les données de chaque fichier
liste_donnees <- list()
# Boucle sur tous les fichiers .nc du dossier
for (fichier in fichiers_nc) {
print(paste("Lecture du fichier:", fichier))
# Ouvrir le fichier NetCDF
nc_data <- nc_open(fichier)
# Extraction des variables
lon <- ncvar_get(nc_data, "lon")  # Longitude
lat <- ncvar_get(nc_data, "lat")  # Latitude
time <- ncvar_get(nc_data, "time")  # Temps
pr <- ncvar_get(nc_data, "pr")  # Précipitations
# Convertir le temps en date (cf. unité "days since 1891-01-01")
time_units <- ncatt_get(nc_data, "time", "units")$value
ref_date <- as.Date(substr(time_units, 12, 21))
time_dates <- ref_date + time  # Convertir les jours en dates
# Transformer les données en format tabulaire
df <- expand.grid(lon = lon, lat = lat, time = time_dates)
df$precipitation <- as.vector(pr)
# Nettoyer les valeurs manquantes
df <- df %>% filter(!is.na(precipitation))
# Ajouter à la liste
liste_donnees[[fichier]] <- df
# Fermer le fichier NetCDF
nc_close(nc_data)
}
# Fusionner toutes les données des fichiers en un seul dataframe
df_final <- bind_rows(liste_donnees)
# Sauvegarder en CSV
write.csv(df_final, "precipitations_completes.csv", row.names = FALSE)
print("Le fichier CSV a été généré avec succès !")
library(dplyr)
library(sf)
library(geosphere)  # Pour la distance entre points
df_precip <- read.csv("precipitations_completes.csv")
df_regions <- read.csv("Countries Longitude and Latitude.csv")
df_regions <- df_regions[!is.na(df_regions$latitude) & !is.na(df_regions$longitude), ]
# Conversion en objets spatiaux
df_precip_sf <- st_as_sf(df_precip, coords = c("lon", "lat"), crs = 4326)
df_regions_sf <- st_as_sf(df_regions, coords = c("longitude", "latitude"), crs = 4326)
# Trouver la région la plus proche pour chaque point de précipitation
df_precip$nearest_region <- st_nearest_feature(df_precip_sf, df_regions_sf)
# Associer le nom de la région la plus proche
df_precip$nearest_region_name <- df_regions$name[df_precip$nearest_region]
# Sauvegarder le fichier mis à jour
write.csv(df_precip, "precipitations_avec_pays.csv", row.names = FALSE)
# Afficher les 10 premières lignes pour vérification
head(df_precip, 10)
dengue_df <- read.csv("dengue_data.csv")
print(colnames(df_precip))
print(colnames(dengue_df))
# Calculer le nombre de valeurs uniques
nombre_valeurs_uniques <- length(unique(df_precip$nearest_region_name))
# Afficher le résultat
print(nombre_valeurs_uniques)
precip_by_country <- df_precip %>%
group_by(nearest_region_name, time) %>%
summarise(total_precipitation = sum(precipitation, na.rm = TRUE))
# Vérifier les résultats
head(precip_by_country)
# S'assurer que la colonne calendar_start_date est au format Date
precip_by_country$time <- as.Date(precip_by_country$time)
# S'assurer que la colonne calendar_start_date est au format Date
dengue_df$calendar_start_date <- as.Date(dengue_df$calendar_start_date)
# Créer une nouvelle colonne year_month avec le premier jour du mois
dengue_df$year_month <- as.Date(paste(format(dengue_df$calendar_start_date, "%Y-%m"), "01", sep = "-"))
# Regrouper les données de dengue par pays et par mois
dengue_monthly <- dengue_df %>%
group_by(adm_0_name, year_month) %>%
summarise(dengue_total_monthly = sum(dengue_total, na.rm = TRUE))
# Nettoyer les noms de pays en convertissant en majuscules
dengue_monthly$adm_0_name <- toupper(trimws(dengue_monthly$adm_0_name))
precip_by_country$nearest_region_name <- toupper(trimws(precip_by_country$nearest_region_name))
# Nettoyer les dates pour qu'elles soient au même format (si nécessaire)
dengue_monthly$year_month <- as.Date(dengue_monthly$year_month)
precip_by_country$time <- as.Date(precip_by_country$time)
# Fusionner les données de précipitations par pays avec les données de dengue
merged_df <- left_join(dengue_monthly, precip_by_country, by = c("adm_0_name" = "nearest_region_name", "year_month" = "time"))
# Vérifier le jeu de données fusionné
head(merged_df)
# Sauvegarder le fichier fusionné
write.csv(merged_df, "merged_dengue_precipitation_by_country.csv", row.names = FALSE)
# Calculer la corrélation
correlation <- cor(merged_df$total_precipitation, merged_df$dengue_total)
# Calculer la corrélation
correlation <- cor(merged_df$total_precipitation, merged_df$dengue_total_monthly)
print(correlation)
# Résumé des données pour détecter les constantes ou les NA
summary(filtered_data$total_precipitation)
summary(filtered_data$dengue_total_monthly)
# Vérification de la variance
var(filtered_data$total_precipitation)
var(filtered_data$dengue_total_monthly)
# Résumé des données pour détecter les constantes ou les NA
summary(merged_df$total_precipitation)
summary(merged_df$dengue_total_monthly)
# Vérification de la variance
var(merged_df$total_precipitation)
var(merged_df$dengue_total_monthly)
# Supprimer les lignes avec NA dans 'total_precipitation' et 'dengue_total_monthly'
filtered_data_clean <- merged_df %>%
filter(!is.na(total_precipitation) & !is.na(dengue_total_monthly))
# Calculer la corrélation
correlation <- cor(filtered_data_clean$total_precipitation, filtered_data_clean$dengue_total_monthly)
print(correlation)
# Calcul de la corrélation par région (ici, 'adm_0_name' représente les pays)
library(dplyr)
correlation_by_region <- merged_df %>%
group_by(adm_0_name) %>%
summarise(correlation = cor(total_precipitation, dengue_total, use = "complete.obs"))
# Calcul de la corrélation par région (ici, 'adm_0_name' représente les pays)
library(dplyr)
correlation_by_region <- merged_df %>%
group_by(adm_0_name) %>%
summarise(correlation = cor(total_precipitation, dengue_total_monthly, use = "complete.obs"))
# Calculer la corrélation
correlation <- cor(filtered_data_clean$total_precipitation, filtered_data_clean$dengue_total_monthly, method = "spearman", use = "complete.obs")
print(correlation)
# Calcul de la corrélation par région (ici, 'adm_0_name' représente les pays)
library(dplyr)
correlation_by_region <- merged_df %>%
group_by(adm_0_name) %>%
summarise(correlation = cor(total_precipitation, dengue_total_monthly, use = "complete.obs"))
