---
title: "Sri Lanka"
format: html
---

```{r}
# Charger les bibliothèques nécessaires
library(dplyr)
library(lubridate)

# Charger le dataset météo
weather_data <- read.csv("SriLanka_Weather_Dataset.csv")

# Convertir la colonne `time` en format Date si ce n'est pas déjà fait
weather_data$time <- as.Date(weather_data$time, format="%Y-%m-%d")

# Extraire l'année et le mois de la colonne `time` pour créer une nouvelle colonne `year_month_first_day`
weather_data$year_month_first_day <- as.Date(paste(year(weather_data$time), month(weather_data$time), "01", sep = "-"))

# Vérifier les données avec la nouvelle colonne `year_month_first_day`
head(weather_data)

```

```{r}
# Agréger les données par mois et par ville, en calculant la moyenne pour les variables pertinentes
monthly_weather_data <- weather_data %>%
  group_by(year_month_first_day, city) %>%
  summarise(
    avg_precipitation_sums = mean(precipitation_sum, na.rm = TRUE), # Moyenne des précipitations
    avg_precipitation_hours = mean(precipitation_hours, na.rm = TRUE),
    avg_temperature_max = mean(temperature_2m_max, na.rm = TRUE),
    avg_temperature_min = mean(temperature_2m_min, na.rm = TRUE),
    avg_temperature_mean = mean(temperature_2m_mean, na.rm = TRUE),
    avg_apparent_temperature_max = mean(apparent_temperature_max, na.rm = TRUE),
    avg_apparent_temperature_min = mean(apparent_temperature_min, na.rm = TRUE),
    avg_apparent_temperature_mean = mean(apparent_temperature_mean, na.rm = TRUE),
    avg_sunrise = mean(as.numeric(sunrise), na.rm = TRUE), # Note : Vous devrez peut-être traiter les heures
    avg_sunset = mean(as.numeric(sunset), na.rm = TRUE), # Idem pour sunset
    avg_shortwave_radiation = mean(shortwave_radiation_sum, na.rm = TRUE),
    avg_windspeed_max = mean(windspeed_10m_max, na.rm = TRUE),
    avg_windgusts_max = mean(windgusts_10m_max, na.rm = TRUE),
    avg_winddirection = mean(winddirection_10m_dominant, na.rm = TRUE),
    avg_et0 = mean(et0_fao_evapotranspiration, na.rm = TRUE)
  )

# Vérifier les données agrégées par mois
head(monthly_weather_data)

```

```{r}
library(readxl)

# Charger les données de dengue
dengue_data <- read_excel("Dengue_Data (2010-2020).xlsx")

# 3. Vérifier les noms des colonnes dans les deux datasets
# Affiche les noms des colonnes pour vérifier qu'ils sont corrects
print(names(dengue_data))  
print(names(monthly_weather_data))

# 4. Convertir les colonnes Date et year_month_first_day en format Date si ce n'est pas déjà fait
dengue_data$Date <- as.Date(dengue_data$Date, format = "%Y-%m-%d")
monthly_weather_data$year_month_first_day <- as.Date(monthly_weather_data$year_month_first_day, format = "%Y-%m-%d")

# 5. Fusionner les deux datasets sur la colonne Date et city
merged_data <- merge(dengue_data, monthly_weather_data, by.x = c("Date", "City"), by.y = c("year_month_first_day", "city"))

# 6. Vérifier les premières lignes du dataset fusionné
head(merged_data)

# Optionnel: Vous pouvez enregistrer le fichier fusionné sous un nouveau nom
write.csv(merged_data, "merged_dengue_weather_data.csv", row.names = FALSE)

```
```{r}
# Convertir les colonnes en numériques si nécessaire
merged_data$Value <- as.numeric(merged_data$Value)
merged_data$avg_precipitation_sums <- as.numeric(merged_data$avg_precipitation_sums)
```


```{r}
library(ggplot2)

# Calculer la corrélation entre les précipitations et les cas de dengue
correlation_precip_dengue <- cor(merged_data$Value, merged_data$avg_precipitation_sums, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre les précipitations et les cas de dengue est de", round(correlation_precip_dengue, 2)))

# Graphique de la relation entre les précipitations et les cas de dengue
ggplot(merged_data, aes(x = avg_precipitation_sums, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  theme_minimal() +
  labs(title = "Relation entre les précipitations et les cas de dengue",
       x = "Précipitations moyennes (mm)",
       y = "Nombre de cas de dengue")

```

```{r}
# Calculer la corrélation entre la température moyenne et les cas de dengue
correlation_temp_dengue <- cor(merged_data$Value, merged_data$avg_temperature_mean, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre la température moyenne et les cas de dengue est de", round(correlation_temp_dengue, 2)))

# Graphique de la relation entre la température moyenne et les cas de dengue
ggplot(merged_data, aes(x = avg_temperature_mean, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  theme_minimal() +
  labs(title = "Relation entre la température moyenne et les cas de dengue",
       x = "Température moyenne (°C)",
       y = "Nombre de cas de dengue")

```
```{r}
# Calculer la corrélation entre la température moyenne et les cas de dengue
correlation_precip_hours_dengue <- cor(merged_data$Value, merged_data$avg_precipitation_hours, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre la température moyenne et les cas de dengue est de", round(correlation_precip_hours_dengue, 2)))

# Graphique de la relation entre la température moyenne et les cas de dengue
ggplot(merged_data, aes(x = avg_temperature_mean, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "green") +
  theme_minimal() +
  labs(title = "Relation entre la température moyenne et les cas de dengue",
       x = "Température moyenne (°C)",
       y = "Nombre de cas de dengue")
```

```{r}
library(ggplot2)

# Calculer la corrélation entre les précipitations et les cas de dengue
correlation_precip_dengue <- cor(merged_data$Value, merged_data$avg_windspeed_max, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre les précipitations et les cas de dengue est de", round(correlation_precip_dengue, 2)))

# Graphique de la relation entre les précipitations et les cas de dengue
ggplot(merged_data, aes(x = avg_windspeed_max, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  theme_minimal() +
  labs(title = "Relation entre les précipitations et les cas de dengue",
       x = "Précipitations moyennes (mm)",
       y = "Nombre de cas de dengue")
```



```{r}
# Graphique de la tendance des cas de dengue et des précipitations au fil du temps
ggplot(merged_data, aes(x = as.Date(Date), y = Value)) +
  geom_line(aes(color = "Cas de Dengue")) +
  geom_line(aes(x = as.Date(Date), y = avg_precipitation_sums, color = "Précipitations")) +
  theme_minimal() +
  labs(title = "Evolution des cas de Dengue et des précipitations",
       x = "Date",
       y = "Valeurs") +
  scale_color_manual(values = c("Cas de Dengue" = "blue", "Précipitations" = "green"))

```
```{r}
# Régression linéaire multiple pour prédire les cas de dengue
model <- lm(Value ~ avg_temperature_mean + avg_precipitation_sums + avg_precipitation_hours + avg_windspeed_max, data = merged_data)

# Résumé du modèle
summary(model)

# Prédictions
predictions <- predict(model, newdata = merged_data)

# Ajouter les prédictions au dataframe
merged_data$predicted_dengue_cases <- predictions

# Graphique des cas réels vs prédits
ggplot(merged_data, aes(x = Value, y = predicted_dengue_cases)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  theme_minimal() +
  labs(title = "Cas réels vs prédits de dengue",
       x = "Cas réels",
       y = "Cas prédits")

```
```{r}
# Agréger les données par mois et par ville, en calculant la moyenne pour les variables pertinentes
monthly_weather_data_sum <- weather_data %>%
  group_by(year_month_first_day, city) %>%
  summarise(
    sum_precipitation = sum(precipitation_sum, na.rm = TRUE), # Moyenne des précipitations
    sum_precipitation_hours = sum(precipitation_hours, na.rm = TRUE),
    avg_temperature_max = mean(temperature_2m_max, na.rm = TRUE),
    avg_temperature_min = mean(temperature_2m_min, na.rm = TRUE),
    avg_temperature_mean = mean(temperature_2m_mean, na.rm = TRUE),
    avg_apparent_temperature_max = mean(apparent_temperature_max, na.rm = TRUE),
    avg_apparent_temperature_min = mean(apparent_temperature_min, na.rm = TRUE),
    avg_apparent_temperature_mean = mean(apparent_temperature_mean, na.rm = TRUE),
    avg_sunrise = mean(as.numeric(sunrise), na.rm = TRUE), # Note : Vous devrez peut-être traiter les heures
    avg_sunset = mean(as.numeric(sunset), na.rm = TRUE), # Idem pour sunset
    avg_shortwave_radiation = mean(shortwave_radiation_sum, na.rm = TRUE),
    avg_windspeed_max = mean(windspeed_10m_max, na.rm = TRUE),
    avg_windgusts_max = mean(windgusts_10m_max, na.rm = TRUE),
    avg_winddirection = mean(winddirection_10m_dominant, na.rm = TRUE),
    avg_et0 = mean(et0_fao_evapotranspiration, na.rm = TRUE)
  )

# Vérifier les données agrégées par mois
head(monthly_weather_data_sum)

# 5. Fusionner les deux datasets sur la colonne Date et city
merged_data_sum <- merge(dengue_data, monthly_weather_data_sum, by.x = c("Date", "City"), by.y = c("year_month_first_day", "city"))
```

```{r}
# Convertir les colonnes en numériques si nécessaire
merged_data_sum$Value <- as.numeric(merged_data_sum$Value)
merged_data_sum$sum_precipitation <- as.numeric(merged_data_sum$sum_precipitation)
```

```{r}
# Calculer la corrélation entre les précipitations et les cas de dengue
correlation_precip_dengue <- cor(merged_data_sum$Value, merged_data_sum$sum_precipitation, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre les précipitations et les cas de dengue est de", round(correlation_precip_dengue, 2)))

# Graphique de la relation entre les précipitations et les cas de dengue
ggplot(merged_data_sum, aes(x = sum_precipitation, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  theme_minimal() +
  labs(title = "Relation entre les précipitations et les cas de dengue",
       x = "Précipitations moyennes (mm)",
       y = "Nombre de cas de dengue")
```

```{r}
# Calculer la corrélation entre la température moyenne et les cas de dengue
correlation_precip_hours_dengue <- cor(merged_data_sum$Value, merged_data_sum$sum_precipitation_hours, use = "complete.obs")

# Afficher le résultat
print(paste("La corrélation entre la température moyenne et les cas de dengue est de", round(correlation_precip_hours_dengue, 2)))

# Graphique de la relation entre la température moyenne et les cas de dengue
ggplot(merged_data_sum, aes(x = sum_precipitation_hours, y = Value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "green") +
  theme_minimal() +
  labs(title = "Relation entre la température moyenne et les cas de dengue",
       x = "Température moyenne (°C)",
       y = "Nombre de cas de dengue")
```

```{r}
# Graphique de la tendance des cas de dengue et des précipitations au fil du temps
ggplot(merged_data_sum, aes(x = as.Date(Date), y = Value)) +
  geom_line(aes(color = "Cas de Dengue")) +
  geom_line(aes(x = as.Date(Date), y = sum_precipitation, color = "Précipitations")) +
  theme_minimal() +
  labs(title = "Evolution des cas de Dengue et des précipitations",
       x = "Date",
       y = "Valeurs") +
  scale_color_manual(values = c("Cas de Dengue" = "blue", "Précipitations" = "red"))
```

```{r}
# Graphique de la tendance des cas de dengue et des précipitations au fil du temps
ggplot(merged_data_sum, aes(x = as.Date(Date), y = Value)) +
  geom_line(aes(color = "Cas de Dengue")) +
  geom_line(aes(x = as.Date(Date), y = sum_precipitation_hours, color = "Précipitations")) +
  theme_minimal() +
  labs(title = "Evolution des cas de Dengue et des précipitations",
       x = "Date",
       y = "Valeurs") +
  scale_color_manual(values = c("Cas de Dengue" = "blue", "Précipitations" = "red"))
```

```{r}
# Graphique de la tendance des cas de dengue et des précipitations au fil du temps
ggplot(merged_data_sum, aes(x = as.Date(Date), y = Value)) +
  geom_line(aes(color = "Cas de Dengue")) +
  geom_line(aes(x = as.Date(Date), y = avg_temperature_mean, color = "Température moyenne")) +
  theme_minimal() +
  labs(title = "Evolution des cas de Dengue et des précipitations",
       x = "Date",
       y = "Valeurs") +
  scale_color_manual(values = c("Cas de Dengue" = "blue", "Température moyenne" = "red"))
```
```{r}
# Régression linéaire multiple pour prédire les cas de dengue
model <- lm(Value ~ sum_precipitation + sum_precipitation_hours + avg_temperature_mean + avg_apparent_temperature_mean + avg_windspeed_max, data = merged_data_sum)

# Résumé du modèle
summary(model)

# Prédictions
predictions <- predict(model, newdata = merged_data_sum)

# Ajouter les prédictions au dataframe
merged_data_sum$predicted_dengue_cases <- predictions

# Graphique des cas réels vs prédits
ggplot(merged_data_sum, aes(x = Value, y = predicted_dengue_cases)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  theme_minimal() +
  labs(title = "Cas réels vs prédits de dengue",
       x = "Cas réels",
       y = "Cas prédits")
```

```{r}
location <- read.csv("locationData.csv")

# Dictionnaire de correction : Clé = Mauvais nom / Valeur = Nom correct
corrections <- c(
  "N eliya" = "Nuwara Eliya",
  "Killinochchi" = "Kilinochchi",
  "Vauniya" = "Vavuniya",
  "Mulative" = "Mullaitivu",
  "Battocolo" = "Batticaloa",
  "Puttalama" = "Puttalam",
  "Anuradapura" = "Anuradhapura",
  "Monaragala" = "Moneragala",
  "Rathnapura" = "Ratnapura",
  "Kegalla" = "Kegalle",
  "Kalminai" = "Kalmunai"
)

# Appliquer les corrections sur les noms de villes du dataset dengue_data
dengue_data <- dengue_data %>%
  mutate(City = recode(City, !!!corrections))

merged_dengue_map <- merge(dengue_data, location, by.x = c("City"), by.y = c("city_name"))

print(unique(location$city_name))
print (unique(dengue_data$City))

head(merged_dengue_map)
```

```{r}
# Appliquer les corrections sur les noms de villes du dataset dengue_data
merged_data_sum <- merged_data_sum %>%
  mutate(City = recode(City, !!!corrections))

merged_precip_map <- merge(merged_data_sum, location, by.x = c("City"), by.y = c("city_name"))

head(merged_precip_map)
```


```{r}
library(shiny)
library(leaflet)
library(dplyr)
library(lubridate)

# Convertir les dates en format Date
merged_dengue_map$Date <- as.Date(merged_dengue_map$Date)

# Récupérer les dates uniques de la colonne Date (premiers jours de chaque mois)
dates_uniques <- sort(unique(merged_dengue_map$Date))  # Trier les dates uniques

# Interface utilisateur
ui <- fluidPage(
    titlePanel("Évolution des cas de dengue au Sri Lanka"),
    
    sidebarLayout(
        sidebarPanel(
            sliderInput("selected_date",
                        "Sélectionner une date :",
                        min = min(dates_uniques),
                        max = max(dates_uniques),
                        value = min(dates_uniques),
                        step = NULL,  # Pas de step ici, ce n'est pas nécessaire
                        animate = TRUE,  # Animation activée pour des transitions lisses
                        timeFormat = "%Y-%m-%d",  # Format de date à afficher
                        ticks = FALSE  # Désactive les ticks entre les dates
            )
        ),
        
        mainPanel(
            leafletOutput("dengueMap")
        )
    )
)

# Serveur de l'application
server <- function(input, output, session) {
    
    # Fonction pour obtenir le premier jour du mois de la date sélectionnée
    first_day_of_month <- function(date) {
        return(as.Date(format(date, "%Y-%m-01")))
    }

    # Filtrer les données selon le premier jour du mois de la date sélectionnée
    filtered_data <- reactive({
        first_day <- first_day_of_month(input$selected_date)
        filtered <- merged_dengue_map %>% filter(Date == first_day)
        
        # Ajouter un message de débogage pour vérifier si des données sont présentes
        if (nrow(filtered) == 0) {
            showModal(modalDialog(
                title = "Aucune donnée disponible",
                paste("Il n'y a pas de données pour la date : ", first_day),
                easyClose = TRUE,
                footer = NULL
            ))
        }
        
        return(filtered)
    })
    
    # Créer la carte Leaflet
    output$dengueMap <- renderLeaflet({
        leaflet() %>%
            addTiles() %>%
            setView(lng = 80.7718, lat = 7.8731, zoom = 7)  # Centré sur le Sri Lanka
    })
    
    # Mettre à jour la carte en fonction des données filtrées
    observe({
        data <- filtered_data()
        
        # Si des données sont présentes, mettre à jour la carte
        if (nrow(data) > 0) {
            leafletProxy("dengueMap", data = data) %>%
                clearMarkers() %>%
                addCircleMarkers(
                    lng = data$longitude,
                    lat = data$latitude,
                    radius = sqrt(data$Value) * 0.5,  # Taille des cercles en fonction des cas
                    color = "red",
                    fillOpacity = 0.5,
                    popup = ~paste0("<b>Ville: </b>", City, "<br><b>Cas: </b>", Value)
                )
        }
    })
}

# Lancer l'application
shinyApp(ui, server)

```

```{r}
# Sélectionner uniquement les variables numériques à utiliser pour le clustering
clustering_data <- merged_data_sum %>%
  select(
    sum_precipitation, 
    sum_precipitation_hours, 
    avg_temperature_mean, 
    avg_apparent_temperature_mean,
    avg_shortwave_radiation,
    avg_windspeed_max,
    avg_windgusts_max,
  )

# Normaliser les données
clustering_data_scaled <- scale(clustering_data)

```

```{r}
# Appliquer la méthode du coude pour choisir le nombre de clusters
wss <- sapply(1:10, function(k) {
  kmeans(clustering_data_scaled, centers = k, nstart = 25)$tot.withinss
})

# Tracer la courbe du coude
plot(1:10, wss, type = "b", pch = 19, xlab = "Nombre de clusters", ylab = "Somme des distances au centre")

```

```{r}
# Appliquer le K-means avec 3 clusters
set.seed(123)  # Pour garantir la reproductibilité
kmeans_result <- kmeans(clustering_data_scaled, centers = 3, nstart = 25)

# Ajouter les labels des clusters à vos données
merged_data_sum$cluster <- kmeans_result$cluster

```

```{r}
# Appliquer une PCA pour réduire la dimensionnalité à 2 composantes principales
pca_result <- prcomp(clustering_data_scaled)

# Tracer les résultats de la PCA avec les clusters
library(ggplot2)
ggplot(data = data.frame(pca_result$x), aes(x = PC1, y = PC2, color = factor(merged_data_sum$cluster))) +
  geom_point() +
  labs(color = "Cluster") +
  ggtitle("Clustering des données avec K-means (PCA)")

```

